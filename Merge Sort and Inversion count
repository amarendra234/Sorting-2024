class Inversion {
public:
     int res;
     void merge(vector<int>&arr,int l,int mid,int r){
          int i=l;
          int j=mid+1;
          vector<int>temp;
          while(i<=mid and j<=r){
               if(arr[i]>arr[j]){
                    temp.push_back(arr[j]);
                    res+=(mid-i+1);
                    j++;
               }else{
                    temp.push_back(arr[i]);
                    i++;
               }
          }
          while(i<=mid){
               temp.push_back(arr[i]);
               i++;
          }
          while(j<=r){
               temp.push_back(arr[j]);
               j++;
          }
          int k=0;
          for(int p=l;p<=r;p++){
               arr[p]=temp[k];
               k++;
          }
     }
     void Inversion_count(vector<int>&arr,int l,int r){
          if(l<r){
               int mid=l+(r-l)/2;
               Inversion_count(arr,l,mid);
               Inversion_count(arr,mid+1,r);
               merge(arr,l,mid,r);
          }
     }
     int count(vector<int> input) {
		res=0;
          Inversion_count(input,0,input.size()-1);
          return res;
     }
};
